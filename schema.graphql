# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  clerkId: String
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderWhereUniqueInput): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
  wishlistItems(where: WishlistItemWhereInput! = {}, orderBy: [WishlistItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WishlistItemWhereUniqueInput): [WishlistItem!]
  wishlistItemsCount(where: WishlistItemWhereInput! = {}): Int
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddressWhereUniqueInput): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  clerkId: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  clerkId: StringFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  isAdmin: BooleanFilter
  orders: OrderManyRelationFilter
  wishlistItems: WishlistItemManyRelationFilter
  addresses: AddressManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input OrderManyRelationFilter {
  every: OrderWhereInput
  some: OrderWhereInput
  none: OrderWhereInput
}

input WishlistItemManyRelationFilter {
  every: WishlistItemWhereInput
  some: WishlistItemWhereInput
  none: WishlistItemWhereInput
}

input AddressManyRelationFilter {
  every: AddressWhereInput
  some: AddressWhereInput
  none: AddressWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  clerkId: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  clerkId: String
  name: String
  email: String
  password: String
  isAdmin: Boolean
  orders: OrderRelateToManyForUpdateInput
  wishlistItems: WishlistItemRelateToManyForUpdateInput
  addresses: AddressRelateToManyForUpdateInput
  createdAt: DateTime
}

input OrderRelateToManyForUpdateInput {
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input WishlistItemRelateToManyForUpdateInput {
  disconnect: [WishlistItemWhereUniqueInput!]
  set: [WishlistItemWhereUniqueInput!]
  create: [WishlistItemCreateInput!]
  connect: [WishlistItemWhereUniqueInput!]
}

input AddressRelateToManyForUpdateInput {
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  clerkId: String
  name: String
  email: String
  password: String
  isAdmin: Boolean
  orders: OrderRelateToManyForCreateInput
  wishlistItems: WishlistItemRelateToManyForCreateInput
  addresses: AddressRelateToManyForCreateInput
  createdAt: DateTime
}

input OrderRelateToManyForCreateInput {
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input WishlistItemRelateToManyForCreateInput {
  create: [WishlistItemCreateInput!]
  connect: [WishlistItemWhereUniqueInput!]
}

input AddressRelateToManyForCreateInput {
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

type Product {
  id: ID!
  name: String
  description: String
  price: Int
  originalPrice: Int
  stock: Int
  image: ImageFieldOutput
  primaryImage: ImageFieldOutput
  images(where: ProductImageWhereInput! = {}, orderBy: [ProductImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductImageWhereUniqueInput): [ProductImage!]
  imagesCount(where: ProductImageWhereInput! = {}): Int
  category: Category
  categoryType: String
  isActive: Boolean
  isFeatured: Boolean
  isNewStock: Boolean
  isOnSale: Boolean
  averageRating: Decimal
  totalReviews: Int
  orderItems(where: OrderItemWhereInput! = {}, orderBy: [OrderItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderItemWhereUniqueInput): [OrderItem!]
  orderItemsCount(where: OrderItemWhereInput! = {}): Int
  wishlistItems(where: WishlistItemWhereInput! = {}, orderBy: [WishlistItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WishlistItemWhereUniqueInput): [WishlistItem!]
  wishlistItemsCount(where: WishlistItemWhereInput! = {}): Int
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

scalar Decimal

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  price: IntFilter
  originalPrice: IntNullableFilter
  stock: IntNullableFilter
  images: ProductImageManyRelationFilter
  category: CategoryWhereInput
  categoryType: StringNullableFilter
  isActive: BooleanFilter
  isFeatured: BooleanFilter
  isNewStock: BooleanFilter
  isOnSale: BooleanFilter
  averageRating: DecimalNullableFilter
  totalReviews: IntNullableFilter
  orderItems: OrderItemManyRelationFilter
  wishlistItems: WishlistItemManyRelationFilter
  reviews: ReviewManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ProductImageManyRelationFilter {
  every: ProductImageWhereInput
  some: ProductImageWhereInput
  none: ProductImageWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalNullableFilter
}

input OrderItemManyRelationFilter {
  every: OrderItemWhereInput
  some: OrderItemWhereInput
  none: OrderItemWhereInput
}

input ReviewManyRelationFilter {
  every: ReviewWhereInput
  some: ReviewWhereInput
  none: ReviewWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  price: OrderDirection
  originalPrice: OrderDirection
  stock: OrderDirection
  categoryType: OrderDirection
  isActive: OrderDirection
  isFeatured: OrderDirection
  isNewStock: OrderDirection
  isOnSale: OrderDirection
  averageRating: OrderDirection
  totalReviews: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProductUpdateInput {
  name: String
  description: String
  price: Int
  originalPrice: Int
  stock: Int
  image: ImageFieldInput
  primaryImage: ImageFieldInput
  images: ProductImageRelateToManyForUpdateInput
  category: CategoryRelateToOneForUpdateInput
  categoryType: String
  isActive: Boolean
  isFeatured: Boolean
  isNewStock: Boolean
  isOnSale: Boolean
  averageRating: Decimal
  totalReviews: Int
  orderItems: OrderItemRelateToManyForUpdateInput
  wishlistItems: WishlistItemRelateToManyForUpdateInput
  reviews: ReviewRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ProductImageRelateToManyForUpdateInput {
  disconnect: [ProductImageWhereUniqueInput!]
  set: [ProductImageWhereUniqueInput!]
  create: [ProductImageCreateInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input OrderItemRelateToManyForUpdateInput {
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

input ReviewRelateToManyForUpdateInput {
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  description: String
  price: Int
  originalPrice: Int
  stock: Int
  image: ImageFieldInput
  primaryImage: ImageFieldInput
  images: ProductImageRelateToManyForCreateInput
  category: CategoryRelateToOneForCreateInput
  categoryType: String
  isActive: Boolean
  isFeatured: Boolean
  isNewStock: Boolean
  isOnSale: Boolean
  averageRating: Decimal
  totalReviews: Int
  orderItems: OrderItemRelateToManyForCreateInput
  wishlistItems: WishlistItemRelateToManyForCreateInput
  reviews: ReviewRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductImageRelateToManyForCreateInput {
  create: [ProductImageCreateInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input OrderItemRelateToManyForCreateInput {
  create: [OrderItemCreateInput!]
  connect: [OrderItemWhereUniqueInput!]
}

input ReviewRelateToManyForCreateInput {
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

type ProductImage {
  id: ID!
  image: ImageFieldOutput
  altText: String
  product: Product
  createdAt: DateTime
}

input ProductImageWhereUniqueInput {
  id: ID
}

input ProductImageWhereInput {
  AND: [ProductImageWhereInput!]
  OR: [ProductImageWhereInput!]
  NOT: [ProductImageWhereInput!]
  id: IDFilter
  altText: StringFilter
  product: ProductWhereInput
  createdAt: DateTimeNullableFilter
}

input ProductImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
  createdAt: OrderDirection
}

input ProductImageUpdateInput {
  image: ImageFieldInput
  altText: String
  product: ProductRelateToOneForUpdateInput
  createdAt: DateTime
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input ProductImageUpdateArgs {
  where: ProductImageWhereUniqueInput!
  data: ProductImageUpdateInput!
}

input ProductImageCreateInput {
  image: ImageFieldInput
  altText: String
  product: ProductRelateToOneForCreateInput
  createdAt: DateTime
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type Review {
  id: ID!
  product: Product
  user: User
  rating: Int
  comment: String
  isVerifiedPurchase: Boolean
  createdAt: DateTime
}

input ReviewWhereUniqueInput {
  id: ID
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  id: IDFilter
  product: ProductWhereInput
  user: UserWhereInput
  rating: IntFilter
  comment: StringFilter
  isVerifiedPurchase: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input ReviewOrderByInput {
  id: OrderDirection
  rating: OrderDirection
  comment: OrderDirection
  isVerifiedPurchase: OrderDirection
  createdAt: OrderDirection
}

input ReviewUpdateInput {
  product: ProductRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  rating: Int
  comment: String
  isVerifiedPurchase: Boolean
  createdAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ReviewUpdateArgs {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateInput!
}

input ReviewCreateInput {
  product: ProductRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  rating: Int
  comment: String
  isVerifiedPurchase: Boolean
  createdAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Category {
  id: ID!
  name: String
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  products: ProductManyRelationFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CategoryUpdateInput {
  name: String
  products: ProductRelateToManyForUpdateInput
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  products: ProductRelateToManyForCreateInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type Order {
  id: ID!
  orderNumber: String
  totalAmount: Int
  status: String
  paymentMethod: String
  paymentStatus: String
  paymentReference: String
  user: User
  items(where: OrderItemWhereInput! = {}, orderBy: [OrderItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderItemWhereUniqueInput): [OrderItem!]
  itemsCount(where: OrderItemWhereInput! = {}): Int
  shippingAddress: ShippingAddress
  createdAt: DateTime
}

input OrderWhereUniqueInput {
  id: ID
  orderNumber: String
  shippingAddress: ShippingAddressWhereUniqueInput
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  orderNumber: StringFilter
  totalAmount: IntFilter
  status: StringFilter
  paymentMethod: StringFilter
  paymentStatus: StringFilter
  paymentReference: StringFilter
  user: UserWhereInput
  items: OrderItemManyRelationFilter
  shippingAddress: ShippingAddressWhereInput
  createdAt: DateTimeNullableFilter
}

input OrderOrderByInput {
  id: OrderDirection
  orderNumber: OrderDirection
  totalAmount: OrderDirection
  status: OrderDirection
  paymentMethod: OrderDirection
  paymentStatus: OrderDirection
  paymentReference: OrderDirection
  createdAt: OrderDirection
}

input OrderUpdateInput {
  orderNumber: String
  totalAmount: Int
  status: String
  paymentMethod: String
  paymentStatus: String
  paymentReference: String
  user: UserRelateToOneForUpdateInput
  items: OrderItemRelateToManyForUpdateInput
  shippingAddress: ShippingAddressRelateToOneForUpdateInput
  createdAt: DateTime
}

input ShippingAddressRelateToOneForUpdateInput {
  create: ShippingAddressCreateInput
  connect: ShippingAddressWhereUniqueInput
  disconnect: Boolean
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  orderNumber: String
  totalAmount: Int
  status: String
  paymentMethod: String
  paymentStatus: String
  paymentReference: String
  user: UserRelateToOneForCreateInput
  items: OrderItemRelateToManyForCreateInput
  shippingAddress: ShippingAddressRelateToOneForCreateInput
  createdAt: DateTime
}

input ShippingAddressRelateToOneForCreateInput {
  create: ShippingAddressCreateInput
  connect: ShippingAddressWhereUniqueInput
}

type OrderItem {
  id: ID!
  order: Order
  product: Product
  quantity: Int
  price: Int
}

input OrderItemWhereUniqueInput {
  id: ID
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  NOT: [OrderItemWhereInput!]
  id: IDFilter
  order: OrderWhereInput
  product: ProductWhereInput
  quantity: IntFilter
  price: IntFilter
}

input OrderItemOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
  price: OrderDirection
}

input OrderItemUpdateInput {
  order: OrderRelateToOneForUpdateInput
  product: ProductRelateToOneForUpdateInput
  quantity: Int
  price: Int
}

input OrderRelateToOneForUpdateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
}

input OrderItemUpdateArgs {
  where: OrderItemWhereUniqueInput!
  data: OrderItemUpdateInput!
}

input OrderItemCreateInput {
  order: OrderRelateToOneForCreateInput
  product: ProductRelateToOneForCreateInput
  quantity: Int
  price: Int
}

input OrderRelateToOneForCreateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

type ShippingAddress {
  id: ID!
  order: Order
  fullName: String
  phone: String
  address: String
  city: String
  state: String
  postalCode: String
  country: String
}

input ShippingAddressWhereUniqueInput {
  id: ID
  order: OrderWhereUniqueInput
}

input ShippingAddressWhereInput {
  AND: [ShippingAddressWhereInput!]
  OR: [ShippingAddressWhereInput!]
  NOT: [ShippingAddressWhereInput!]
  id: IDFilter
  order: OrderWhereInput
  fullName: StringFilter
  phone: StringFilter
  address: StringFilter
  city: StringFilter
  state: StringFilter
  postalCode: StringFilter
  country: StringFilter
}

input ShippingAddressOrderByInput {
  id: OrderDirection
  fullName: OrderDirection
  phone: OrderDirection
  address: OrderDirection
  city: OrderDirection
  state: OrderDirection
  postalCode: OrderDirection
  country: OrderDirection
}

input ShippingAddressUpdateInput {
  order: OrderRelateToOneForUpdateInput
  fullName: String
  phone: String
  address: String
  city: String
  state: String
  postalCode: String
  country: String
}

input ShippingAddressUpdateArgs {
  where: ShippingAddressWhereUniqueInput!
  data: ShippingAddressUpdateInput!
}

input ShippingAddressCreateInput {
  order: OrderRelateToOneForCreateInput
  fullName: String
  phone: String
  address: String
  city: String
  state: String
  postalCode: String
  country: String
}

type WishlistItem {
  id: ID!
  user: User
  product: Product
  addedAt: DateTime
}

input WishlistItemWhereUniqueInput {
  id: ID
}

input WishlistItemWhereInput {
  AND: [WishlistItemWhereInput!]
  OR: [WishlistItemWhereInput!]
  NOT: [WishlistItemWhereInput!]
  id: IDFilter
  user: UserWhereInput
  product: ProductWhereInput
  addedAt: DateTimeNullableFilter
}

input WishlistItemOrderByInput {
  id: OrderDirection
  addedAt: OrderDirection
}

input WishlistItemUpdateInput {
  user: UserRelateToOneForUpdateInput
  product: ProductRelateToOneForUpdateInput
  addedAt: DateTime
}

input WishlistItemUpdateArgs {
  where: WishlistItemWhereUniqueInput!
  data: WishlistItemUpdateInput!
}

input WishlistItemCreateInput {
  user: UserRelateToOneForCreateInput
  product: ProductRelateToOneForCreateInput
  addedAt: DateTime
}

type Address {
  id: ID!
  user: User
  fullName: String
  phone: String
  address: String
  city: String
  state: String
  postalCode: String
  country: String
  isDefault: Boolean
  createdAt: DateTime
}

input AddressWhereUniqueInput {
  id: ID
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IDFilter
  user: UserWhereInput
  fullName: StringFilter
  phone: StringFilter
  address: StringFilter
  city: StringFilter
  state: StringFilter
  postalCode: StringFilter
  country: StringFilter
  isDefault: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input AddressOrderByInput {
  id: OrderDirection
  fullName: OrderDirection
  phone: OrderDirection
  address: OrderDirection
  city: OrderDirection
  state: OrderDirection
  postalCode: OrderDirection
  country: OrderDirection
  isDefault: OrderDirection
  createdAt: OrderDirection
}

input AddressUpdateInput {
  user: UserRelateToOneForUpdateInput
  fullName: String
  phone: String
  address: String
  city: String
  state: String
  postalCode: String
  country: String
  isDefault: Boolean
  createdAt: DateTime
}

input AddressUpdateArgs {
  where: AddressWhereUniqueInput!
  data: AddressUpdateInput!
}

input AddressCreateInput {
  user: UserRelateToOneForCreateInput
  fullName: String
  phone: String
  address: String
  city: String
  state: String
  postalCode: String
  country: String
  isDefault: Boolean
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(where: ProductWhereUniqueInput!, data: ProductUpdateInput!): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductImage(data: ProductImageCreateInput!): ProductImage
  createProductImages(data: [ProductImageCreateInput!]!): [ProductImage]
  updateProductImage(where: ProductImageWhereUniqueInput!, data: ProductImageUpdateInput!): ProductImage
  updateProductImages(data: [ProductImageUpdateArgs!]!): [ProductImage]
  deleteProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  deleteProductImages(where: [ProductImageWhereUniqueInput!]!): [ProductImage]
  createReview(data: ReviewCreateInput!): Review
  createReviews(data: [ReviewCreateInput!]!): [Review]
  updateReview(where: ReviewWhereUniqueInput!, data: ReviewUpdateInput!): Review
  updateReviews(data: [ReviewUpdateArgs!]!): [Review]
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteReviews(where: [ReviewWhereUniqueInput!]!): [Review]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createOrderItem(data: OrderItemCreateInput!): OrderItem
  createOrderItems(data: [OrderItemCreateInput!]!): [OrderItem]
  updateOrderItem(where: OrderItemWhereUniqueInput!, data: OrderItemUpdateInput!): OrderItem
  updateOrderItems(data: [OrderItemUpdateArgs!]!): [OrderItem]
  deleteOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deleteOrderItems(where: [OrderItemWhereUniqueInput!]!): [OrderItem]
  createShippingAddress(data: ShippingAddressCreateInput!): ShippingAddress
  createShippingAddresses(data: [ShippingAddressCreateInput!]!): [ShippingAddress]
  updateShippingAddress(where: ShippingAddressWhereUniqueInput!, data: ShippingAddressUpdateInput!): ShippingAddress
  updateShippingAddresses(data: [ShippingAddressUpdateArgs!]!): [ShippingAddress]
  deleteShippingAddress(where: ShippingAddressWhereUniqueInput!): ShippingAddress
  deleteShippingAddresses(where: [ShippingAddressWhereUniqueInput!]!): [ShippingAddress]
  createWishlistItem(data: WishlistItemCreateInput!): WishlistItem
  createWishlistItems(data: [WishlistItemCreateInput!]!): [WishlistItem]
  updateWishlistItem(where: WishlistItemWhereUniqueInput!, data: WishlistItemUpdateInput!): WishlistItem
  updateWishlistItems(data: [WishlistItemUpdateArgs!]!): [WishlistItem]
  deleteWishlistItem(where: WishlistItemWhereUniqueInput!): WishlistItem
  deleteWishlistItems(where: [WishlistItemWhereUniqueInput!]!): [WishlistItem]
  createAddress(data: AddressCreateInput!): Address
  createAddresses(data: [AddressCreateInput!]!): [Address]
  updateAddress(where: AddressWhereUniqueInput!, data: AddressUpdateInput!): Address
  updateAddresses(data: [AddressUpdateArgs!]!): [Address]
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteAddresses(where: [AddressWhereUniqueInput!]!): [Address]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  productImage(where: ProductImageWhereUniqueInput!): ProductImage
  productImages(where: ProductImageWhereInput! = {}, orderBy: [ProductImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductImageWhereUniqueInput): [ProductImage!]
  productImagesCount(where: ProductImageWhereInput! = {}): Int
  review(where: ReviewWhereUniqueInput!): Review
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderWhereUniqueInput): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  orderItems(where: OrderItemWhereInput! = {}, orderBy: [OrderItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderItemWhereUniqueInput): [OrderItem!]
  orderItemsCount(where: OrderItemWhereInput! = {}): Int
  shippingAddress(where: ShippingAddressWhereUniqueInput!): ShippingAddress
  shippingAddresses(where: ShippingAddressWhereInput! = {}, orderBy: [ShippingAddressOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ShippingAddressWhereUniqueInput): [ShippingAddress!]
  shippingAddressesCount(where: ShippingAddressWhereInput! = {}): Int
  wishlistItem(where: WishlistItemWhereUniqueInput!): WishlistItem
  wishlistItems(where: WishlistItemWhereInput! = {}, orderBy: [WishlistItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WishlistItemWhereUniqueInput): [WishlistItem!]
  wishlistItemsCount(where: WishlistItemWhereInput! = {}): Int
  address(where: AddressWhereUniqueInput!): Address
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddressWhereUniqueInput): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
