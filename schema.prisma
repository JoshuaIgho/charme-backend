// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String         @id @default(uuid()) @postgresql.Uuid
  clerkId          String         @unique @default("")
  name             String         @default("")
  email            String         @unique @default("")
  password         String?
  isAdmin          Boolean        @default(false)
  orders           Order[]        @relation("Order_user")
  wishlistItems    WishlistItem[] @relation("WishlistItem_user")
  addresses        Address[]      @relation("Address_user")
  createdAt        DateTime?      @default(now())
  from_Review_user Review[]       @relation("Review_user")
}

model Product {
  id                     String         @id @default(uuid()) @postgresql.Uuid
  name                   String         @default("")
  description            String         @default("")
  price                  Int
  originalPrice          Int?
  stock                  Int?           @default(0)
  image_id               String?
  image_filesize         Int?
  image_width            Int?
  image_height           Int?
  image_extension        String?
  primaryImage_id        String?
  primaryImage_filesize  Int?
  primaryImage_width     Int?
  primaryImage_height    Int?
  primaryImage_extension String?
  images                 ProductImage[] @relation("ProductImage_product")
  category               Category?      @relation("Product_category", fields: [categoryId], references: [id])
  categoryId             String?        @map("category") @postgresql.Uuid
  categoryType           String?
  isActive               Boolean        @default(true)
  isFeatured             Boolean        @default(false)
  isNewStock             Boolean        @default(false)
  isOnSale               Boolean        @default(false)
  averageRating          Decimal?       @default("0") @postgresql.Decimal(3, 2)
  totalReviews           Int?           @default(0)
  orderItems             OrderItem[]    @relation("OrderItem_product")
  wishlistItems          WishlistItem[] @relation("WishlistItem_product")
  reviews                Review[]       @relation("Review_product")
  createdAt              DateTime?      @default(now())
  updatedAt              DateTime?      @updatedAt

  @@index([categoryId])
}

model ProductImage {
  id              String    @id @default(uuid()) @postgresql.Uuid
  image_id        String?
  image_filesize  Int?
  image_width     Int?
  image_height    Int?
  image_extension String?
  altText         String    @default("")
  product         Product?  @relation("ProductImage_product", fields: [productId], references: [id])
  productId       String?   @map("product") @postgresql.Uuid
  createdAt       DateTime? @default(now())

  @@index([productId])
}

model Review {
  id                 String    @id @default(uuid()) @postgresql.Uuid
  product            Product?  @relation("Review_product", fields: [productId], references: [id])
  productId          String?   @map("product") @postgresql.Uuid
  user               User?     @relation("Review_user", fields: [userId], references: [id])
  userId             String?   @map("user") @postgresql.Uuid
  rating             Int
  comment            String    @default("")
  isVerifiedPurchase Boolean   @default(false)
  createdAt          DateTime? @default(now())

  @@index([productId])
  @@index([userId])
}

model Category {
  id       String    @id @default(uuid()) @postgresql.Uuid
  name     String    @default("")
  products Product[] @relation("Product_category")
}

model Order {
  id                String           @id @default(uuid()) @postgresql.Uuid
  orderNumber       String           @unique @default("")
  totalAmount       Int
  status            String           @default("pending")
  paymentMethod     String           @default("stripe")
  paymentStatus     String           @default("pending")
  paymentReference  String           @default("")
  user              User?            @relation("Order_user", fields: [userId], references: [id])
  userId            String?          @map("user") @postgresql.Uuid
  items             OrderItem[]      @relation("OrderItem_order")
  shippingAddress   ShippingAddress? @relation("Order_shippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId String?          @unique @map("shippingAddress") @postgresql.Uuid
  createdAt         DateTime?        @default(now())

  @@index([userId])
}

model OrderItem {
  id        String   @id @default(uuid()) @postgresql.Uuid
  order     Order?   @relation("OrderItem_order", fields: [orderId], references: [id])
  orderId   String?  @map("order") @postgresql.Uuid
  product   Product? @relation("OrderItem_product", fields: [productId], references: [id])
  productId String?  @map("product") @postgresql.Uuid
  quantity  Int
  price     Int

  @@index([orderId])
  @@index([productId])
}

model ShippingAddress {
  id         String @id @default(uuid()) @postgresql.Uuid
  order      Order? @relation("Order_shippingAddress")
  fullName   String @default("")
  phone      String @default("")
  address    String @default("")
  city       String @default("")
  state      String @default("")
  postalCode String @default("")
  country    String @default("")
}

model WishlistItem {
  id        String    @id @default(uuid()) @postgresql.Uuid
  user      User?     @relation("WishlistItem_user", fields: [userId], references: [id])
  userId    String?   @map("user") @postgresql.Uuid
  product   Product?  @relation("WishlistItem_product", fields: [productId], references: [id])
  productId String?   @map("product") @postgresql.Uuid
  addedAt   DateTime? @default(now())

  @@index([userId])
  @@index([productId])
}

model Address {
  id         String    @id @default(uuid()) @postgresql.Uuid
  user       User?     @relation("Address_user", fields: [userId], references: [id])
  userId     String?   @map("user") @postgresql.Uuid
  fullName   String    @default("")
  phone      String    @default("")
  address    String    @default("")
  city       String    @default("")
  state      String    @default("")
  postalCode String    @default("")
  country    String    @default("Nigeria")
  isDefault  Boolean   @default(false)
  createdAt  DateTime? @default(now())

  @@index([userId])
}
